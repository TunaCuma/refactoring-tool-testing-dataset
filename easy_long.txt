// File: ReportGenerator.java
public class ReportGenerator {
    /**
     * Generates a report by validating input, summarizing counts, and formatting output.
     */
    public String generateReport(String[] items) {
        // 1. Validate input
        if (items == null || items.length == 0) {
            return "No items to report.";
        }
        // 2. Count occurrences
        java.util.Map<String, Integer> counts = new java.util.HashMap<>();
        for (String item : items) {
            if (item == null) continue;
            counts.put(item, counts.getOrDefault(item, 0) + 1);
        }
        // 3. Build report header
        StringBuilder sb = new StringBuilder();
        sb.append("Report:\n");
        sb.append("--------\n");
        // 4. Append counts
        for (java.util.Map.Entry<String, Integer> entry : counts.entrySet()) {
            sb.append(entry.getKey())
              .append(": ")
              .append(entry.getValue())
              .append("\n");
        }
        // 5. Add footer with total
        int total = 0;
        for (int c : counts.values()) {
            total += c;
        }
        sb.append("--------\n");
        sb.append("Total items: ").append(total);
        return sb.toString();
    }
}

// File: ReportGeneratorTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
class ReportGeneratorTest {
    @Test
    void testGenerateReportWithItems() {
        ReportGenerator gen = new ReportGenerator();
        String[] input = {"apple", "banana", "apple", "orange", null};
        String report = gen.generateReport(input);
        assertTrue(report.contains("apple: 2"));
        assertTrue(report.contains("banana: 1"));
        assertTrue(report.contains("orange: 1"));
        assertTrue(report.contains("Total items: 4"));
    }

    @Test
    void testGenerateReportEmpty() {
        ReportGenerator gen = new ReportGenerator();
        assertEquals("No items to report.", gen.generateReport(new String[0]));
    }
}

// File: OrderProcessor.java
public class OrderProcessor {
    /**
     * Processes an order by validating, calculating price, applying discounts, and returning summary.
     */
    public String processOrder(String customer, java.util.List<Double> prices, double discountRate) {
        // 1. Validate inputs
        if (customer == null || customer.isEmpty()) {
            throw new IllegalArgumentException("Customer required");
        }
        if (prices == null || prices.isEmpty()) {
            return "No items to process for " + customer;
        }
        // 2. Sum prices
        double sum = 0;
        for (Double p : prices) {
            if (p == null || p < 0) continue;
            sum += p;
        }
        // 3. Calculate discount
        double discount = sum * discountRate;
        double total = sum - discount;
        // 4. Format result
        StringBuilder sb = new StringBuilder();
        sb.append("Order for ").append(customer).append("\n");
        sb.append("Subtotal: $").append(String.format("%.2f", sum)).append("\n");
        sb.append("Discount: $").append(String.format("%.2f", discount)).append("\n");
        sb.append("Total: $").append(String.format("%.2f", total));
        return sb.toString();
    }
}

// File: OrderProcessorTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
class OrderProcessorTest {
    @Test
    void testProcessOrderValid() {
        OrderProcessor op = new OrderProcessor();
        String summary = op.processOrder("Alice", Arrays.asList(10.0, 20.0, 30.0), 0.1);
        assertTrue(summary.contains("Subtotal: $60.00"));
        assertTrue(summary.contains("Discount: $6.00"));
        assertTrue(summary.contains("Total: $54.00"));
    }

    @Test
    void testProcessOrderNoPrices() {
        OrderProcessor op = new OrderProcessor();
        assertEquals("No items to process for Bob", op.processOrder("Bob", java.util.Collections.emptyList(), 0.2));
    }
}

// File: CustomerPrinter.java
public class CustomerPrinter {
    /**
     * Prints customer details by assembling name, address, and order history.
     */
    public String printCustomer(java.util.Map<String, String> info, java.util.List<String> history) {
        // 1. Header
        StringBuilder sb = new StringBuilder();
        sb.append("Customer Details:\n");
        // 2. Info fields
        for (String key : new String[]{"name", "address", "email"}) {
            String value = info.get(key);
            sb.append(key.substring(0,1).toUpperCase()).append(key.substring(1))
              .append(": ")
              .append(value == null ? "N/A" : value)
              .append("\n");
        }
        // 3. Order history
        sb.append("Order History:\n");
        if (history == null || history.isEmpty()) {
            sb.append("(none)\n");
        } else {
            for (String order : history) {
                sb.append("- ").append(order).append("\n");
            }
        }
        // 4. Footer
        sb.append("----- End -----");
        return sb.toString();
    }
}

// File: CustomerPrinterTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
class CustomerPrinterTest {
    @Test
    void testPrintCustomerFull() {
        CustomerPrinter cp = new CustomerPrinter();
        Map<String,String> info = new HashMap<>();
        info.put("name","Jane"); info.put("address","123 St"); info.put("email","jane@example.com");
        List<String> hist = Arrays.asList("order1","order2");
        String output = cp.printCustomer(info, hist);
        assertTrue(output.contains("Name: Jane"));
        assertTrue(output.contains("Order History:"));
        assertTrue(output.contains("- order1"));
    }

    @Test
    void testPrintCustomerEmptyHistory() {
        CustomerPrinter cp = new CustomerPrinter();
        Map<String,String> info = new HashMap<>();
        info.put("name","Sam");
        String output = cp.printCustomer(info, Collections.emptyList());
        assertTrue(output.contains("Address: N/A"));
        assertTrue(output.contains("(none)"));
    }
}

// File: InvoiceCalculator.java
public class InvoiceCalculator {
    /**
     * Calculates invoice totals by summing items, adding tax and fees.
     */
    public double calculateInvoice(java.util.List<Double> items, double taxRate, double fee) {
        // Sum items
        double sum = 0;
        for (Double item : items) {
            if (item != null && item > 0) sum += item;
        }
        // Apply tax
        double tax = sum * taxRate;
        // Final total
        return sum + tax + fee;
    }
}

// File: InvoiceCalculatorTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
class InvoiceCalculatorTest {
    @Test
    void testCalculateInvoice() {
        InvoiceCalculator calc = new InvoiceCalculator();
        double total = calc.calculateInvoice(Arrays.asList(100.0, 50.0), 0.2, 10.0);
        assertEquals(100+50 + (150*0.2) + 10.0, total);
    }

    @Test
    void testCalculateInvoiceEmpty() {
        InvoiceCalculator calc = new InvoiceCalculator();
        assertEquals(5.0, calc.calculateInvoice(Collections.emptyList(), 0.1, 5.0));
    }
}

// File: LogAnalyzer.java
public class LogAnalyzer {
    /**
     * Analyzes log lines, counts error types, and returns a summary.
     */
    public String analyze(java.util.List<String> logs) {
        if (logs == null) return "No logs provided.";
        int info=0, warn=0, error=0;
        for (String line : logs) {
            if (line.contains("INFO")) info++;
            else if (line.contains("WARN")) warn++;
            else if (line.contains("ERROR")) error++;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("INFO: ").append(info).append("\n");
        sb.append("WARN: ").append(warn).append("\n");
        sb.append("ERROR: ").append(error);
        return sb.toString();
    }
}

// File: LogAnalyzerTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
class LogAnalyzerTest {
    @Test
    void testAnalyzeLogs() {
        LogAnalyzer la = new LogAnalyzer();
        List<String> logs = Arrays.asList("INFO start","WARN disk","ERROR crash","INFO end");
        String res = la.analyze(logs);
        assertTrue(res.contains("INFO: 2"));
        assertTrue(res.contains("WARN: 1"));
        assertTrue(res.contains("ERROR: 1"));
    }

    @Test
    void testAnalyzeNull() {
        LogAnalyzer la = new LogAnalyzer();
        assertEquals("No logs provided.", la.analyze(null));
    }
}

// File: XmlParser.java
public class XmlParser {
    /**
     * Parses a simple XML-like string into a map of tag->value.
     */
    public java.util.Map<String,String> parse(String xml) {
        java.util.Map<String,String> map = new java.util.HashMap<>();
        if (xml == null || xml.isEmpty()) return map;
        String[] parts = xml.split("<");
        for (String part : parts) {
            if (!part.contains(">")) continue;
            String tag = part.substring(0, part.indexOf(">"));
            String rest = part.substring(part.indexOf(">")+1);
            if (!rest.contains("</")) continue;
            String value = rest.substring(0, rest.indexOf("</"));
            map.put(tag, value);
        }
        return map;
    }
}

// File: XmlParserTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
class XmlParserTest {
    @Test
    void testParseSimple() {
        XmlParser xp = new XmlParser();
        Map<String,String> m = xp.parse("<a>Hello</a><b>World</b>");
        assertEquals("Hello", m.get("a"));
        assertEquals("World", m.get("b"));
    }

    @Test
    void testParseEmpty() {
        XmlParser xp = new XmlParser();
        assertTrue(xp.parse("").isEmpty());
    }
}

// File: CsvHandler.java
public class CsvHandler {
    /**
     * Reads CSV text, splits into rows and columns, returns as 2D list.
     */
    public java.util.List<java.util.List<String>> readCsv(String csvText) {
        java.util.List<java.util.List<String>> result = new java.util.ArrayList<>();
        if (csvText == null || csvText.isEmpty()) return result;
        String[] rows = csvText.split("\n");
        for (String row : rows) {
            java.util.List<String> cols = new java.util.ArrayList<>();
            for (String cell : row.split(",")) {
                cols.add(cell.trim());
            }
            result.add(cols);
        }
        return result;
    }
}

// File: CsvHandlerTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
class CsvHandlerTest {
    @Test
    void testReadCsv() {
        CsvHandler ch = new CsvHandler();
        String csv = "a,b,c\n1,2,3";
        List<List<String>> out = ch.readCsv(csv);
        assertEquals(2, out.size());
        assertEquals(Arrays.asList("a","b","c"), out.get(0));
        assertEquals(Arrays.asList("1","2","3"), out.get(1));
    }

    @Test
    void testReadCsvEmpty() {
        CsvHandler ch = new CsvHandler();
        assertTrue(ch.readCsv("").isEmpty());
    }
}

// File: UserManager.java
public class UserManager {
    /**
     * Registers and authenticates users in-memory, returns status.
     */
    public String handleUser(String action, String username, String password) {
        java.util.Map<String,String> db = new java.util.HashMap<>();
        StringBuilder sb = new StringBuilder();
        // 1. Register
        if ("register".equalsIgnoreCase(action)) {
            if (db.containsKey(username)) sb.append("User exists.");
            else {
                db.put(username, password);
                sb.append("Registered ").append(username);
            }
        }
        // 2. Login
        else if ("login".equalsIgnoreCase(action)) {
            if (!db.containsKey(username)) sb.append("No such user.");
            else if (!db.get(username).equals(password)) sb.append("Wrong password.");
            else sb.append("Welcome ").append(username);
        } else sb.append("Unknown action.");
        return sb.toString();
    }
}

// File: UserManagerTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
class UserManagerTest {
    @Test
    void testRegisterAndLogin() {
        UserManager um = new UserManager();
        assertTrue(um.handleUser("register","u","p").contains("Registered u"));
        assertTrue(um.handleUser("login","u","p").contains("Welcome u"));
    }

    @Test
    void testLoginFailures() {
        UserManager um = new UserManager();
        assertTrue(um.handleUser("login","x","y").contains("No such user."));
    }
}

// File: NotificationService.java
public class NotificationService {
    /**
     * Sends notifications to users by filtering preferences and formatting messages.
     */
    public java.util.List<String> notifyUsers(java.util.Map<String,Boolean> prefs, String message) {
        java.util.List<String> sent = new java.util.ArrayList<>();
        for (java.util.Map.Entry<String,Boolean> entry : prefs.entrySet()) {
            String user = entry.getKey();
            Boolean wants = entry.getValue();
            if (Boolean.TRUE.equals(wants)) {
                // simulate send
                sent.add("Sent to " + user + ": " + message);
            }
        }
        return sent;
    }
}

// File: NotificationServiceTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
class NotificationServiceTest {
    @Test
    void testNotifyUsers() {
        NotificationService ns = new NotificationService();
        Map<String,Boolean> prefs = new HashMap<>();
        prefs.put("a", true); prefs.put("b", false);
        List<String> out = ns.notifyUsers(prefs, "Hi");
        assertEquals(1, out.size());
        assertTrue(out.get(0).contains("Sent to a"));
    }

    @Test
    void testNotifyNone() {
        NotificationService ns = new NotificationService();
        assertTrue(ns.notifyUsers(new HashMap<>(), "x").isEmpty());
    }
}

// File: DiscountApplier.java
public class DiscountApplier {
    /**
     * Applies tiered discounts based on purchase amount.
     */
    public double apply(double amount) {
        double discount = 0;
        if (amount > 1000) {
            discount = amount * 0.2;
        } else if (amount > 500) {
            discount = amount * 0.1;
        } else if (amount > 100) {
            discount = amount * 0.05;
        }
        double total = amount - discount;
        // apply membership fee
        if (amount > 200) {
            total -= 10;
        }
        return total;
    }
}

// File: DiscountApplierTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
class DiscountApplierTest {
    @Test
    void testApplyTiers() {
        DiscountApplier da = new DiscountApplier();
        assertEquals(100 - (100*0.05), da.apply(100));
        assertEquals(600 - (600*0.1) - 10, da.apply(600));
        assertEquals(1500 - (1500*0.2) - 10, da.apply(1500));
    }

    @Test
    void testApplySmall() {
        DiscountApplier da = new DiscountApplier();
        assertEquals(50, da.apply(50));
    }
}
