// File: PaymentProcessor.java
public class PaymentProcessor {
    /**
     * Calculates processing fee based on payment type.
     */
    public double calculateFee(String paymentType, double amount) {
        double fee = 0.0;
        // legacy placeholder
        int unusedCounter = 0; // should be removed
        switch (paymentType) {
            case "CREDIT":
                fee = amount * 0.02;
                break;
            case "DEBIT":
                fee = amount * 0.015;
                break;
            case "PAYPAL":
                fee = amount * 0.03;
                break;
            case "BITCOIN":
                fee = amount * 0.025;
                break;
            default:
                fee = amount * 0.05;
                break;
        }
        // TODO: remove commented code
        // if (paymentType.equals("CREDIT")) {}
        return fee;
    }
}

// File: PaymentProcessorTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class PaymentProcessorTest {
    @Test
    void testCalculateFeeCredit() {
        PaymentProcessor proc = new PaymentProcessor();
        assertEquals(2.0, proc.calculateFee("CREDIT", 100.0));
    }

    @Test
    void testCalculateFeeDefault() {
        PaymentProcessor proc = new PaymentProcessor();
        assertEquals(5.0, proc.calculateFee("UNKNOWN", 100.0));
    }
}

// File: ExportService.java
public class ExportService {
    /**
     * Exports data in various formats.
     */
    public String exportData(String format, String data) {
        String result;
        switch (format) {
            case "PDF":
                result = "Exporting to PDF: " + data;
                break;
            case "CSV":
                result = "Exporting to CSV: " + data;
                break;
            case "XML":
                result = "Exporting to XML: " + data;
                break;
            case "JSON":
                result = "Exporting to JSON: " + data;
                break;
            default:
                result = "Format not supported: " + format;
                break;
        }
        return result;
    }
}

// File: ExportServiceTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ExportServiceTest {
    @Test
    void testExportDataPdf() {
        ExportService svc = new ExportService();
        assertTrue(svc.exportData("PDF", "data").contains("PDF"));
    }

    @Test
    void testExportDataUnsupported() {
        ExportService svc = new ExportService();
        assertTrue(svc.exportData("TXT", "data").contains("not supported"));
    }
}

// File: DiscountApplier.java
public class DiscountApplier {
    /**
     * Applies discount based on customer type.
     */
    public double applyDiscount(String customerType, double price) {
        double finalPrice;
        if (customerType.equals("REGULAR")) {
            finalPrice = price * 0.95;
        } else if (customerType.equals("PREMIUM")) {
            finalPrice = price * 0.90;
        } else if (customerType.equals("VIP")) {
            finalPrice = price * 0.85;
        } else {
            finalPrice = price;
        }
        return finalPrice;
    }
}

// File: DiscountApplierTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class DiscountApplierTest {
    @Test
    void testApplyDiscountPremium() {
        DiscountApplier da = new DiscountApplier();
        assertEquals(90.0, da.applyDiscount("PREMIUM", 100.0));
    }

    @Test
    void testApplyDiscountNone() {
        DiscountApplier da = new DiscountApplier();
        assertEquals(100.0, da.applyDiscount("UNKNOWN", 100.0));
    }
}

// File: NotificationSender.java
public class NotificationSender {
    /**
     * Sends notifications based on channel.
     */
    public String send(String channel, String message) {
        String output;
        switch (channel) {
            case "EMAIL":
                output = "Email sent: " + message;
                break;
            case "SMS":
                output = "SMS sent: " + message;
                break;
            case "PUSH":
                output = "Push notification: " + message;
                break;
            default:
                output = "Channel not supported: " + channel;
                break;
        }
        return output;
    }
}

// File: NotificationSenderTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class NotificationSenderTest {
    @Test
    void testSendSms() {
        NotificationSender ns = new NotificationSender();
        assertTrue(ns.send("SMS", "Hello").contains("SMS sent"));
    }

    @Test
    void testSendUnsupported() {
        NotificationSender ns = new NotificationSender();
        assertTrue(ns.send("FAX", "Hello").contains("not supported"));
    }
}

// File: SortingContext.java
public class SortingContext {
    /**
     * Sorts array based on algorithm name.
     */
    public int[] sort(int[] data, String algorithm) {
        int[] result = data.clone();
        if (algorithm.equals("BUBBLE")) {
            // bubble sort
            for (int i = 0; i < result.length; i++) {
                for (int j = 0; j < result.length - 1; j++) {
                    if (result[j] > result[j + 1]) {
                        int temp = result[j];
                        result[j] = result[j + 1];
                        result[j + 1] = temp;
                    }
                }
            }
        } else if (algorithm.equals("INSERTION")) {
            // insertion sort
            for (int i = 1; i < result.length; i++) {
                int key = result[i];
                int j = i - 1;
                while (j >= 0 && result[j] > key) {
                    result[j + 1] = result[j];
                    j--;
                }
                result[j + 1] = key;
            }
        }
        return result;
    }
}

// File: SortingContextTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class SortingContextTest {
    @Test
    void testBubbleSort() {
        SortingContext sc = new SortingContext();
        int[] input = {3,1,2};
        assertArrayEquals(new int[]{1,2,3}, sc.sort(input, "BUBBLE"));
    }

    @Test
    void testInsertionSort() {
        SortingContext sc = new SortingContext();
        int[] input = {3,1,2};
        assertArrayEquals(new int[]{1,2,3}, sc.sort(input, "INSERTION"));
    }
}

// File: CompressionTool.java
public class CompressionTool {
    /**
     * Compresses data using specified algorithm.
     */
    public byte[] compress(byte[] data, String algo) {
        // dummy placeholder for compression
        if (algo.equals("ZIP")) {
            return new byte[]{1};
        } else if (algo.equals("GZIP")) {
            return new byte[]{2};
        } else {
            return data;
        }
    }
}

// File: CompressionToolTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class CompressionToolTest {
    @Test
    void testCompressZip() {
        CompressionTool ct = new CompressionTool();
        assertArrayEquals(new byte[]{1}, ct.compress(new byte[]{0}, "ZIP"));
    }

    @Test
    void testCompressDefault() {
        CompressionTool ct = new CompressionTool();
        byte[] data = {0};
        assertArrayEquals(data, ct.compress(data, "UNKNOWN"));
    }
}

// File: TaxCalculator.java
public class TaxCalculator {
    /**
     * Calculates tax based on region.
     */
    public double calculate(double income, String region) {
        double tax;
        switch (region) {
            case "US":
                tax = income * 0.30;
                break;
            case "EU":
                tax = income * 0.25;
                break;
            case "ASIA":
                tax = income * 0.20;
                break;
            default:
                tax = income * 0.35;
                break;
        }
        return tax;
    }
}

// File: TaxCalculatorTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class TaxCalculatorTest {
    @Test
    void testCalculateUs() {
        TaxCalculator tc = new TaxCalculator();
        assertEquals(30.0, tc.calculate(100.0, "US"));
    }

    @Test
    void testCalculateDefault() {
        TaxCalculator tc = new TaxCalculator();
        assertEquals(35.0, tc.calculate(100.0, "UNKNOWN"));
    }
}

// File: MessageFormatter.java
public class MessageFormatter {
    /**
     * Formats message based on style.
     */
    public String format(String message, String style) {
        if (style.equals("UPPERCASE")) {
            return message.toUpperCase();
        } else if (style.equals("LOWERCASE")) {
            return message.toLowerCase();
        } else if (style.equals("CAMEL")) {
            String[] parts = message.split(" ");
            StringBuilder sb = new StringBuilder();
            for (String p : parts) {
                sb.append(Character.toUpperCase(p.charAt(0))).append(p.substring(1));
            }
            return sb.toString();
        }
        return message;
    }
}

// File: MessageFormatterTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class MessageFormatterTest {
    @Test
    void testFormatUppercase() {
        MessageFormatter mf = new MessageFormatter();
        assertEquals("HELLO WORLD", mf.format("hello world", "UPPERCASE"));
    }

    @Test
    void testFormatCamel() {
        MessageFormatter mf = new MessageFormatter();
        assertEquals("HelloWorld", mf.format("hello world", "CAMEL"));
    }
}

// File: FileParser.java
public class FileParser {
    /**
     * Parses file content based on type.
     */
    public String parse(String content, String type) {
        if (type.equals("JSON")) {
            return "Parsed JSON: " + content;
        } else if (type.equals("XML")) {
            return "Parsed XML: " + content;
        } else if (type.equals("TEXT")) {
            return "Parsed Text: " + content;
        }
        return "Unknown type";
    }
}

// File: FileParserTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class FileParserTest {
    @Test
    void testParseJson() {
        FileParser fp = new FileParser();
        assertTrue(fp.parse("{}", "JSON").contains("Parsed JSON"));
    }

    @Test
    void testParseUnknown() {
        FileParser fp = new FileParser();
        assertEquals("Unknown type", fp.parse("data", "YAML"));
    }
}

// File: TravelRoutePlanner.java
public class TravelRoutePlanner {
    /**
     * Plans route based on transportation mode.
     */
    public String plan(String mode, String destination) {
        if (mode.equals("CAR")) {
            return "Driving to " + destination;
        } else if (mode.equals("TRAIN")) {
            return "Taking train to " + destination;
        } else if (mode.equals("FLIGHT")) {
            return "Flying to " + destination;
        }
        return "Walking to " + destination;
    }
}

// File: TravelRoutePlannerTest.java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class TravelRoutePlannerTest {
    @Test
    void testPlanFlight() {
        TravelRoutePlanner trp = new TravelRoutePlanner();
        assertEquals("Flying to Paris", trp.plan("FLIGHT", "Paris"));
    }

    @Test
    void testPlanDefault() {
        TravelRoutePlanner trp = new TravelRoutePlanner();
        assertEquals("Walking to Paris", trp.plan("BIKE", "Paris"));
    }
}
